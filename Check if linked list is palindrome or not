class Solution
{
    
    //Function to check whether the list is palindrome.
    boolean isPalindrome(Node head) 
    {
        // Find middle element of LL
        // Reverse the other half
        // check first and second half
        
        
        if(head == null || head.next == null){
            return true;
        }
        
		// find mid and break linkedlist in two part from mid
        Node slow = head;
        Node fast = head;
        while(fast!=null && fast.next!=null && fast.next.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        
        // reverse the second part of linked list
        Node curr = slow.next;
        Node prev = null;
        while(curr != null){
            Node temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        
        fast = prev; // head of second part
        slow = head; // head of first part
        while(slow != null && fast != null){
            if (slow.data != fast.data){
                return false;
            }
            slow = slow.next;
            fast = fast.next;
        }
        
        return true;
      
        
    }    
}
